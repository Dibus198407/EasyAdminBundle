{# @var ea \EasyCorp\Bundle\EasyAdminBundle\Context\ApplicationContext #}
{# @var fields \EasyCorp\Bundle\EasyAdminBundle\Contracts\FieldInterface[] #}
{# @var paginator \EasyCorp\Bundle\EasyAdminBundle\Orm\EntityPaginator #}
{% extends ea.template('layout') %}
{% trans_default_domain ea.dashboard.translationDomain %}
{#
{% set _request_parameters = app.request.query.all|merge(_request_parameters|default({}))|merge({
    action: app.request.get('action'),
    entity: _entity_config.name,
    menuIndex: app.request.get('menuIndex'),
    submenuIndex: app.request.get('submenuIndex'),
    sortField: app.request.get('sortField'),
    sortDirection: app.request.get('sortDirection'),
    page: app.request.get('page', 1),
    filters: app.request.get('filters', []),
    query: app.request.get('query')|default(''),
    referer: null
}) %}

{% set _request_parameters = _request_parameters|merge({ referer: path('easyadmin', _request_parameters)|url_encode }) %}
{% set _has_batch_actions = batch_form is defined and batch_form.vars.batch_actions|length > 0 %}
{% set _has_filters = _entity_config.list.filters|default(false) %}
#}

{% block body_id 'easyadmin-index-' ~ ea.entity.shortClassName %}
{% block body_class 'index index-' ~ ea.entity.shortClassName %}

{% block content_title %}
    {% apply spaceless %}
        {% if 'search' == app.request.get('action') %}
            {% set default_title = 'search.page_title'|transchoice(paginator.numResults, {}, 'EasyAdminBundle') %}
            {{ ea.page.title is null ? default_title|raw : ea.page.title|transchoice(paginator.numResults)|raw }}
        {% else %}
            {% set default_title = 'page.index.title'|trans(ea.i18n.transParameters, 'EasyAdminBundle') %}
            {{ ea.page.title is null ? default_title|raw : ea.page.title|trans(ea.i18n.transParameters)|raw }}
        {% endif %}
    {% endapply %}
{% endblock %}

{% block global_actions %}
    {% if ea.page.searchEnabled %}
        {% block search_action %}
            <div class="form-action form-action-search">
                <form method="get">
                    {% block search_form %}
                        {# browsers remove the query string when submitting forms using GET;
                           that's why all query string params are added as hidden form fields #}
                        {% for paramName, paramValue in ea.request.query.all %}
                            {% if paramValue is iterable %}
                                {% for subParamName, subParamValue in paramValue %}
                                    <input type="hidden" name="{{ paramName }}[{{ subParamName }}]" value="{{ subParamValue }}">
                                {% endfor %}
                            {% else %}
                                <input type="hidden" name="{{ paramName }}" value="{{ paramValue }}">
                            {% endif %}
                        {% endfor %}

                        {# reset the page number whenever a new query is performed #}
                        <input type="hidden" name="page" value="1">

                        {#
                        {% for name, value in _request_parameters.filters|easyadmin_form_hidden_params('filters') %}
                            <input type="hidden" name="{{ name }}" value="{{ value }}">
                        {% endfor %}
                        #}
                        <div class="form-group">
                            <div class="form-widget">
                                <input class="form-control" type="search" name="query" value="{{ app.request.get('query') ?? '' }}" placeholder="{{ 'action.search'|trans(ea.i18n.transParameters, 'EasyAdminBundle') }}">
                            </div>
                        </div>
                    {% endblock %}
                </form>
            </div>
        {% endblock search_action %}
    {% endif %}
{#
    {% if _has_filters %}
        {% set _applied_filters = app.request.attributes.get('easyadmin').filters.applied|default(false) %}
        {% block filters_action %}
            <div class="btn-group action-filters">
                <a href="{{ path('easyadmin', _request_parameters|merge({ action: 'filters', referer_action: app.request.get('action') })) }}" class="btn btn-secondary btn-labeled btn-labeled-right action-filters-button {{ _applied_filters ? 'action-filters-applied' }}" data-modal="#modal-filters">
                    <i class="fa fa-filter fa-fw"></i> {{ 'filter.title'|trans(_trans_parameters, 'EasyAdminBundle') }}{% if _applied_filters %} <span class="text-primary">({{ _applied_filters|length }})</span>{% endif %}
                </a>
                {% if _applied_filters %}
                    <a href="{{ path('easyadmin', _request_parameters|merge({ filters: null })) }}" class="btn btn-secondary action-filters-reset">
                        <i class="fa fa-close"></i>
                    </a>
                {% endif %}
            </div>
        {% endblock filters_action %}
    {% endif %}

    {% if easyadmin_action_is_enabled_for_list_view('new', _entity_config.name) %}
        {% set _action = easyadmin_get_action_for_list_view('new', _entity_config.name) %}
        {% block new_action %}
            <div class="button-action">
                <a class="{{ _action.css_class|default('') }}" href="{{ path('easyadmin', _request_parameters|merge({ action: _action.name })) }}" target="{{ _action.target }}">
                    {% if _action.icon %}<i class="fa fa-fw fa-{{ _action.icon }}"></i>{% endif %}
                    {{ _action.label is defined and not _action.label is empty ? _action.label|trans(_trans_parameters) }}
                </a>
            </div>
        {% endblock new_action %}
    {% endif %}
#}
{% endblock global_actions %}

{% block batch_actions %}
    {#
    {% if _has_batch_actions %}
        <div class="batch-actions" style="display: none">
            {% form_theme batch_form with easyadmin_config('design.form_theme') only %}
            {{ form(batch_form) }}

            {{ include('@EasyAdmin/default/includes/_batch_action_modal.html.twig', {
                _translation_domain: _entity_config.translation_domain,
                _trans_parameters: _trans_parameters,
                _entity_config: _entity_config,
            }, with_context = false) }}
        </div>
    {% endif %}
    #}
{% endblock batch_actions %}

{% block content_header %}
    {{ parent() }}
    {{ block('batch_actions') }}
    {% if has_filters ?? false %}
        {{ include('@EasyAdmin/default/includes/_filters_modal.html.twig') }}
    {% endif %}
{% endblock content_header %}

{% block main %}
    {# sort can be multiple; let's consider the sorting field the first one #}
    {% set sort_field_name = app.request.get('sort')|keys|first %}
    {% set sort_order = app.request.get('sort')|first %}
    {% set some_results_are_hidden = false %}
    {#{% set _list_item_actions = easyadmin_get_actions_for_list_item(_entity_config.name) %}#}

    <table class="table datagrid">
        <thead>
        {% block table_head %}
            <tr>
                {#
                {% if _has_batch_actions %}
                    <th width="1px"><span><input type="checkbox" class="form-batch-checkbox-all"></span></th>
                {% endif %}
                #}


                {% for field in fields %}
                    {% set isSortingField = (field.property == sort_field_name) or ('association' == field.type and sort_field_name starts with field.property ~ '.') %}
                    {% set nextSortDirection = isSortingField ? (sort_order == 'DESC' ? 'ASC' : 'DESC') : 'DESC' %}
                    {% set column_label = field.label|trans(ea.i18n.transParameters) %}
                    {% set column_icon = isSortingField ? (nextSortDirection == 'DESC' ? 'fa-arrow-up' : 'fa-arrow-down') : 'fa-sort' %}

                    <th class="{{ isSortingField ? 'sorted' }} {# metadata.virtual ? 'virtual' #} {# metadata.dataType|lower #} {{ field.cssClass }}" dir="{{ ea.i18n.textDirection }}">
                        {% if field.sortable %}
                            <a href="{{ ea_path({ page: 1, sort: { (field.property): nextSortDirection }}) }}">
                                {{ column_label|raw }} <i class="fa fa-fw {{ column_icon }}"></i>
                            </a>
                        {% else %}
                            <span>{{ column_label|raw }}</span>
                        {% endif %}
                    </th>
                {% endfor %}



{#
                {% if _list_item_actions|length > 0 %}
                    <th {% if _entity_config.list.collapse_actions %}width="10px"{% endif %} {{ easyadmin_config('design.rtl') ? 'dir="rtl"' }}>
                        <span class="sr-only">{{ 'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') }}</span>
                    </th>
                {% endif %}
                #}
            </tr>
        {% endblock table_head %}
        </thead>

        <tbody>
        {% block table_body %}
            {% for entity in paginator.results %}
                {% if not easyadmin_is_granted(ea.page.itemPermission, entity) %}
                    {% set some_results_are_hidden = true %}
                {% else %}
                    <tr data-id="{{ ea.entity.idValueAsString }}">
                    {#
                        {% if _has_batch_actions %}
                            <td><input type="checkbox" class="form-batch-checkbox" value="{{ _item_id }}"></td>
                        {% endif %}
                    #}

                    {% for field in fields %}
                        <td class="{{ field.property == sort_field_name ? 'sorted' }} {{ field.type|lower }} {{ field.cssClass }}" dir="{{ ea.i18n.textDirection }}">
                            {{ ea_render_field(field, ea.entity.withProperties({ entityInstance: entity })) }}
                        </td>
                    {% endfor %}

                        {#
                    {% if _list_item_actions|length > 0 %}
                        {% set _column_label =  'list.row_actions'|trans(_trans_parameters, 'EasyAdminBundle') %}
                        <td class="actions">
                            {% block item_actions %}
                                {% set _actions_template = _entity_config.list.collapse_actions
                                    ? '@EasyAdmin/default/includes/_actions_dropdown.html.twig'
                                    : '@EasyAdmin/default/includes/_actions.html.twig'
                                %}
                                {{ include(_actions_template, {
                                    actions: _list_item_actions,
                                    entity_config: _entity_config,
                                    request_parameters: _request_parameters,
                                    translation_domain: _entity_config.translation_domain,
                                    trans_parameters: _trans_parameters,
                                    item_id: _item_id,
                                    item: item
                                }, with_context = false) }}
                            {% endblock item_actions %}
                        </td>
                    {% endif %}
                </tr>
                #}
                {% endif %}
            {% else %}
                <tr>
                    <td class="no-results" colspan="{{ fields|length + 1 }}">
                        {{ 'search.no_results'|trans(ea.i18n.transParameters, 'EasyAdminBundle') }}
                    </td>
                </tr>
            {% endfor %}

            {% if some_results_are_hidden %}
                <tr class="datagrid-row-empty">
                    <td class="text-center" colspan="{{ fields|length + 1 }}">
                        <span class="datagrid-row-empty-message"><i class="fa fa-lock mr-1"></i> {{ 'security.list.hidden_results'|trans({}, 'EasyAdminBundle') }}</span>
                    </td>
                </tr>
            {% endif %}
        {% endblock table_body %}
        </tbody>
    </table>

    {% block delete_form %}
        {#
        {% set referer = paginator.currentPage == paginator.nbPages and 1 != paginator.currentPage and 1 == paginator.currentPageResults|length
            ? path('easyadmin', app.request.query|merge({ page: app.request.query.get('page') - 1 }))
            : app.request.requestUri
        %}

        {{ include('@EasyAdmin/default/includes/_delete_form.html.twig', {
            view: 'list',
            referer: referer,
            delete_form: delete_form_template,
            _translation_domain: _entity_config.translation_domain,
            _trans_parameters: _trans_parameters,
            _entity_config: _entity_config,
        }, with_context = false) }}
        #}
    {% endblock delete_form %}
{% endblock main %}

{% block content_footer %}
    {% block paginator %}
        {{ include(ea.template('paginator')) }}
    {% endblock paginator %}
{% endblock %}

{% block body_javascript %}
    {{ parent() }}

    <script type="text/javascript">
        $(function() {
            const toggles = document.querySelectorAll('.checkbox-switch input[type="checkbox"]');
            for (i = 0; i < toggles.length; i++) {
                toggles[i].addEventListener('change', function () {
                    const toggle = this;
                    const newValue = this.checked;
                    const oldValue = !newValue;
                    const propertyName = this.closest('.checkbox-switch').dataset.propertyname;

                    const toggleUrl = "{{ path(ea.dashboard.routeName, { crudAction: 'form', crudController: 'App\Controller\Admin\ProductAdminController' })|raw }}"
                        + "&id=" + this.closest('tr').dataset.id
                        + "&property=" + propertyName
                        + "&newValue=" + newValue.toString();

                    let toggleRequest = $.ajax({ type: "GET", url: toggleUrl, data: {} });

                    toggleRequest.done(function(result) {});

                    toggleRequest.fail(function() {
                        // in case of error, restore the original value and disable the toggle
                        toggle.checked = oldValue;
                        toggle.disabled = true;
                        toggle.closest('.checkbox-switch').classList.add('disabled');
                    });
                });
            }

            $('.action-delete').on('click', function(e) {
                e.preventDefault();
                const id = $(this).parents('tr').first().data('id');

                $('#modal-delete').modal({ backdrop: true, keyboard: true })
                    .off('click', '#modal-delete-button')
                    .on('click', '#modal-delete-button', function () {
                        let deleteForm = $('#delete-form');
                        deleteForm.attr('action', deleteForm.attr('action').replace('__id__', id));
                        deleteForm.trigger('submit');
                    });
            });
            {#
            {% if _has_filters %}
            // HTML5 specifies that a <script> tag inserted with innerHTML should not execute
            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
            // That's why we can't use just 'innerHTML'. See https://stackoverflow.com/a/47614491/2804294
            var setInnerHTML = function(element, htmlContent) {
                element.innerHTML = htmlContent;
                Array.from(element.querySelectorAll('script')).forEach( oldScript => {
                    const newScript = document.createElement('script');
                    Array.from(oldScript.attributes)
                        .forEach(attr => newScript.setAttribute(attr.name, attr.value));
                    newScript.appendChild(document.createTextNode(oldScript.innerHTML));
                    oldScript.parentNode.replaceChild(newScript, oldScript);
                });
            };

            document.querySelector('.action-filters-button').addEventListener('click', function(event) {
                let filterButton = event.currentTarget;
                let filterModal = document.querySelector(filterButton.dataset.modal);
                let filterModalBody = filterModal.querySelector('.modal-body');

                $(filterModal).modal({ backdrop: true, keyboard: true });
                filterModalBody.innerHTML = '<div class="fa-3x px-3 py-3 text-muted text-center"><i class="fas fa-circle-notch fa-spin"></i></div>';

                $.get(filterButton.getAttribute('href'), function (response) {
                    setInnerHTML(filterModalBody, response);
                });

                event.preventDefault();
                event.stopPropagation();
            });
            {% endif %}

            {% if _has_batch_actions %}
            const titleContent = $('.content-header-title > .title').html();
            $(document).on('click', '.deselect-batch-button', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox-all').prop('checked', false).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox-all', function () {
                $(this).closest('.content').find(':checkbox.form-batch-checkbox').prop('checked', $(this).prop('checked')).trigger('change');
            });
            $(document).on('change', '.form-batch-checkbox', function () {
                const $content = $(this).closest('.content');
                let $input = $content.find(':hidden#batch_form_ids');
                let ids = $input.val() ? $input.val().split(',') : [];
                const id = $(this).val();

                if ($(this).prop('checked')) {
                    if (-1 === ids.indexOf(id)) {
                        ids.push(id);
                    }
                } else {
                    ids = ids.filter(function(value) { return value !== id });
                    $content.find(':checkbox.form-batch-checkbox-all').prop('checked', false);
                }

                if (0 === ids.length) {
                    $content.find('.global-actions').show();
                    $content.find('.batch-actions').hide();
                    $content.find('table').removeClass('table-batch');
                } else {
                    $content.find('.batch-actions').show();
                    $content.find('.global-actions').hide();
                    $content.find('table').addClass('table-batch');
                }

                $input.val(ids.join(','));
                $content.find('.content-header-title > .title').html(0 === ids.length ? titleContent : '');
            });

            $('button[name="batch_form[name]"].ask-confirm-batch-button').on('click', function (event) {
                event.preventDefault();
                event.stopPropagation();
                let $button = $(this);

                $('#modal-batch-action').modal({ backdrop : true, keyboard : true })
                    .off('click', '#modal-batch-action-button')
                    .on('click', '#modal-batch-action-button', function () {
                        $button.unbind('click');
                        $button.trigger('click');
                    });
            });
            {% endif %}
            #}
        });
    </script>

    {% if app.request.get('query') is not empty %}
        <script type="text/javascript">
            const search_query = "{{ app.request.get('query')|default('')|e('js') }}";
            // the original query is prepended to allow matching exact phrases in addition to single words
            $('#main').find('table tbody td:not(.actions)').highlight($.merge([search_query], search_query.split(' ')));
        </script>
    {% endif %}
{% endblock %}
